from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, FSInputFile
from docxtpl import DocxTemplate

from bot import bot
from config import ADMIN_IDS
from keyboard_creator import create_kb


router = Router()


class FSMFillForm(StatesGroup):
    fill_quest = State()
    fill_product = State()
    fill_my_product = State()
    fill_number = State()
    fill_zakaz = State()
    fill_fio = State()
    fill_phone = State()
    fill_email = State()
    change = State()
    fill_id = State()
    fill_ans = State()


@router.message(CommandStart(), StateFilter(default_state))
async def process_start(msg: Message):
    await msg.answer_photo(
        photo="AgACAgIAAxkBAAMFZ83YS0YCoiEbVrW5Q3XfLOF-iNoAAj3vMRvQNXBK32u3Mi5yd2UBAAMCAANzAAM2BA",
        caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Oculus üòΩ',
        reply_markup=create_kb(1,
                               ticket="–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ç–∞–ª–æ–Ω üìÑ",
                               quest="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚ÅâÔ∏è"))

@router.callback_query(F.data == "quest", StateFilter(default_state))
async def process_quest(cb: CallbackQuery, state: FSMContext):
    await bot.send_message(cb.from_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    await state.set_state(FSMFillForm.fill_quest)


@router.message(StateFilter(FSMFillForm.fill_quest))
async def process_quest_forward(msg: Message, state: FSMContext):
    for admin_id in ADMIN_IDS:
        try:
            await bot.forward_message(chat_id=admin_id, from_chat_id=msg.chat.id, message_id=msg.message_id)
            await bot.send_message(chat_id=admin_id,
                                   text=f'username - {msg.from_user.username}\n'
                                        f'id -       {msg.from_user.id}',
                                   reply_markup=create_kb(1,
                                                          ans="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞"))
        except Exception:
            pass
    await msg.answer(text='–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ, —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–µ–º—É —Ä–∞–±–æ—á–µ–º—É –≥—Ä–∞—Ñ–∏–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
                     reply_markup=create_kb(1,
                                            ticket="–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ç–∞–ª–æ–Ω üìÑ",
                                            quest="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚ÅâÔ∏è"))
    await state.set_state(default_state)


@router.callback_query(F.data == "ans", StateFilter(default_state))
async def process_id(cb: CallbackQuery, state: FSMContext):
    await bot.send_message(cb.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞")
    await state.set_state(FSMFillForm.fill_id)


@router.message(StateFilter(FSMFillForm.fill_id))
async def process_ans(msg: Message, state: FSMContext):
    await state.update_data(user_id=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —é–∑–µ—Ä–∞")
    await state.set_state(FSMFillForm.fill_ans)


@router.message(StateFilter(FSMFillForm.fill_ans))
async def process_send_ans(msg: Message, state: FSMContext):
    dct = await state.get_data()
    try:
        await bot.send_message(chat_id=dct['user_id'], text=msg.text)
        await msg.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await state.set_state(default_state)
    except Exception:
        await msg.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.set_state(default_state)


@router.callback_query(F.data == "ticket", StateFilter(default_state))
async def process_ticket(cb: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=cb.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–æ–≤–∞—Ä–∞.",
                           reply_markup=create_kb(1,
                                                  p_1="Meta Oculus Quest 3",
                                                  p_2="Meta Oculus Quest 3S",
                                                  p_3="Pico 4 Pro",
                                                  p_4="Pico 4 Ultra",
                                                  p_5="Sony PlayStation 5",
                                                  p_6="Sony PlayStation 5 Pro",
                                                  my_product='–í–Ω–µ—Å—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é'))
    await state.set_state(FSMFillForm.fill_product)


@router.callback_query(F.data.in_({'p_1', 'p_2', 'p_3', 'p_4', 'p_5', 'p_6'}), StateFilter(FSMFillForm.fill_product))
async def process_product(cb: CallbackQuery, state: FSMContext):
    dct = {
        'p_1': "Meta Oculus Quest 3",
        'p_2': "Meta Oculus Quest 3S",
        'p_3': "Pico 4 Pro",
        'p_4': "Pico 4 Ultra",
        'p_5': "Sony PlayStation 5",
        'p_6': "Sony PlayStation 5 Pro"
    }
    await state.update_data(product=dct[cb.data])
    await bot.send_message(chat_id=cb.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")

    await state.set_state(FSMFillForm.fill_number)


@router.callback_query(F.data == 'my_product', StateFilter(FSMFillForm.fill_product))
async def process_my_product(cb: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=cb.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.set_state(FSMFillForm.fill_my_product)


@router.message(StateFilter(FSMFillForm.fill_my_product), F.text)
async def process_my_product_enter(msg: Message, state: FSMContext):
    await state.update_data(product=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")

    await state.set_state(FSMFillForm.fill_number)


@router.message(StateFilter(FSMFillForm.fill_my_product))
async def process_my_product_enter_wrong(msg: Message):
    await msg.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


@router.message(StateFilter(FSMFillForm.fill_number))
async def process_number(msg: Message, state: FSMContext):
    await state.update_data(number=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞ Ozon/WB/Yandex/Sber.")

    await state.set_state(FSMFillForm.fill_zakaz)


@router.message(StateFilter(FSMFillForm.fill_zakaz))
async def process_zakaz(msg: Message, state: FSMContext):
    await state.update_data(zakaz=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ –§–ò–û.",
                     reply_markup=create_kb(1,
                                            no_fio='–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ'))

    await state.set_state(FSMFillForm.fill_fio)


@router.message(StateFilter(FSMFillForm.fill_fio))
async def process_fio(msg: Message, state: FSMContext):
    await state.update_data(fio=msg.text)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    await state.set_state(FSMFillForm.fill_phone)


@router.callback_query(F.data == 'no_fio', StateFilter(FSMFillForm.fill_fio))
async def process_no_fio(cb: CallbackQuery, state: FSMContext):
    await state.update_data(fio="–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ")
    await bot.send_message(chat_id=cb.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    await state.set_state(FSMFillForm.fill_phone)


@router.message(StateFilter(FSMFillForm.fill_phone))
async def process_phone(msg: Message, state: FSMContext):
    await state.update_data(phone=msg.text)
    await msg.answer(text="–ù–∞ –∫–∞–∫–æ–π —ç–ª. –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–∏–∫?")

    await state.set_state(FSMFillForm.fill_email)


@router.message(StateFilter(FSMFillForm.fill_email))
async def process_doc(msg: Message, state: FSMContext):
    await state.update_data(email=msg.text)
    dct = await state.get_data()
    doc = DocxTemplate("temp.docx")
    context = {'product': dct['product'],
               'number': dct['number'],
               'zakaz': dct['zakaz'],
               'fio': dct['fio'],
               'phone': dct['phone'],
               'email': dct['email']}
    doc.render(context)
    doc.save(f"–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞-{msg.from_user.id}.docx")
    document = FSInputFile(f"–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞-{msg.from_user.id}.docx")
    await msg.answer_document(document=document,
                              caption="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–æ–≥–ª–∞—Å–µ–Ω –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.",
                              reply_markup=create_kb(1,
                                                     yes="–°–æ–≥–ª–∞—Å–µ–Ω",
                                                     no="–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"))
    await state.set_state(FSMFillForm.change)


@router.callback_query(F.data.in_({'yes', 'no'}), StateFilter(FSMFillForm.change))
async def process_restart(cb: CallbackQuery, state: FSMContext):
    if cb.data == 'yes':
        await bot.send_message(chat_id=cb.from_user.id,
                         text='–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_document(admin_id, FSInputFile(f"–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞-{cb.from_user.id}.docx"),
                                        caption=f"username - {cb.from_user.username}\n"
                                                f"user_id - {cb.from_user.id}")
            except Exception:
                pass
    await cb.bot.send_photo(
        chat_id=cb.from_user.id,
        photo="AgACAgIAAxkBAAMFZ83YS0YCoiEbVrW5Q3XfLOF-iNoAAj3vMRvQNXBK32u3Mi5yd2UBAAMCAANzAAM2BA",
        caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Oculus üòΩ',
        reply_markup=create_kb(1,
                               ticket="–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Ç–∞–ª–æ–Ω üìÑ",
                               quest="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚ÅâÔ∏è"))
    await state.set_state(default_state)

@router.message(F.from_user.id == 1012882762)
async def process_load_photo(mes: Message):
    print(mes.photo[0].file_id)
